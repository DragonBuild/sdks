// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.2.10.317 clang-1200.0.20.2)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WidgetKit
import Combine
import Foundation
import Intents
import Swift
import SwiftUI
@_exported import WidgetKit
import os.log
import os
public struct WidgetInfo {
  public let configuration: Intents.INIntent?
  public let family: WidgetKit.WidgetFamily
  public let kind: Swift.String
}
extension WidgetInfo : Swift.Identifiable, Swift.Hashable, Swift.Equatable {
  public var id: WidgetKit.WidgetInfo {
    get
  }
  public typealias ID = WidgetKit.WidgetInfo
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WidgetKit.WidgetInfo, b: WidgetKit.WidgetInfo) -> Swift.Bool
}
extension WidgetInfo : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct StaticConfiguration<Content> : SwiftUI.WidgetConfiguration, SwiftUI._Widget where Content : SwiftUI.View {
  public var body: WidgetKit.BridgedBody {
    get
  }
  public typealias Body = WidgetKit.BridgedBody
  public typealias WidgetBody = WidgetKit.BridgedBody
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension StaticConfiguration {
  public init<Provider, PlaceholderContent>(kind: Swift.String, provider: Provider, placeholder: PlaceholderContent, content: @escaping (Provider.Entry) -> Content) where Provider : WidgetKit.TimelineProvider, PlaceholderContent : SwiftUI.View
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct WidgetPreviewContext : SwiftUI.PreviewContext {
  public subscript<Key>(key: Key.Type) -> Key.Value where Key : SwiftUI.PreviewContextKey {
    get
  }
  public init(family: WidgetKit.WidgetFamily)
}
@available(*, deprecated)
@objc public enum RequestReason : Swift.Int {
  case timeline
  case ephemeral
  case addSheet
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated)
public struct _WidgetPreviewContextKey : SwiftUI.PreviewContextKey {
  public static var defaultValue: WidgetKit._WidgetPreviewContextKey?
  public typealias Value = WidgetKit._WidgetPreviewContextKey?
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TimelineProviderContext {
  @dynamicMemberLookup public struct EnvironmentVariants {
    public subscript<T>(dynamicMember keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, T>) -> [T]? {
      get
    }
    public subscript<T>(keyPath: Swift.WritableKeyPath<SwiftUI.EnvironmentValues, T>) -> [T]? {
      get
    }
  }
  public let environmentVariants: WidgetKit.TimelineProviderContext.EnvironmentVariants
  public let family: WidgetKit.WidgetFamily
  public let isPreview: Swift.Bool
  public let displaySize: CoreGraphics.CGSize
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TimelineEntryRelevance : Swift.Codable, Swift.Hashable {
  public let score: Swift.Float
  public let duration: Foundation.TimeInterval
  public init(score: Swift.Float, duration: Foundation.TimeInterval = 0.0)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: WidgetKit.TimelineEntryRelevance, b: WidgetKit.TimelineEntryRelevance) -> Swift.Bool
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TimelineEntry {
  var date: Foundation.Date { get }
  var relevance: WidgetKit.TimelineEntryRelevance? { get }
}
extension TimelineEntry {
  public var relevance: WidgetKit.TimelineEntryRelevance? {
    get
  }
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct TimelineReloadPolicy : Swift.Equatable {
  public static let atEnd: WidgetKit.TimelineReloadPolicy
  public static let never: WidgetKit.TimelineReloadPolicy
  public static func after(_ date: Foundation.Date) -> WidgetKit.TimelineReloadPolicy
  public static func == (a: WidgetKit.TimelineReloadPolicy, b: WidgetKit.TimelineReloadPolicy) -> Swift.Bool
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Timeline<EntryType> where EntryType : WidgetKit.TimelineEntry {
  @available(*, deprecated, renamed: "TimelineReloadPolicy")
  public enum ReloadPolicy {
    case atEnd
    case after(Foundation.Date)
    case never
  }
  public let entries: [EntryType]
  public let policy: WidgetKit.Timeline<EntryType>.ReloadPolicy
  @available(*, deprecated, renamed: "init(entries:policy:)")
  @_disfavoredOverload public init(entries: [EntryType], policy: WidgetKit.Timeline<EntryType>.ReloadPolicy)
  public init(entries: [EntryType], policy: WidgetKit.TimelineReloadPolicy)
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol TimelineProvider {
  associatedtype Entry : WidgetKit.TimelineEntry
  typealias Context = WidgetKit.TimelineProviderContext
  func snapshot(with context: Self.Context, completion: @escaping (Self.Entry) -> ())
  func timeline(with context: Self.Context, completion: @escaping (WidgetKit.Timeline<Self.Entry>) -> ())
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol IntentTimelineProvider {
  associatedtype Entry : WidgetKit.TimelineEntry
  associatedtype Intent : Intents.INIntent
  typealias Context = WidgetKit.TimelineProviderContext
  func snapshot(for configuration: Self.Intent, with context: Self.Context, completion: @escaping (Self.Entry) -> ())
  func timeline(for configuration: Self.Intent, with context: Self.Context, completion: @escaping (WidgetKit.Timeline<Self.Entry>) -> ())
}
@_hasMissingDesignatedInitializers public class WidgetCenter {
  public static let shared: WidgetKit.WidgetCenter
  @available(*, deprecated, renamed: "getCurrentConfigurations(_:)")
  public func currentConfigurations(_ completion: @escaping (Swift.Result<[WidgetKit.WidgetInfo], Swift.Error>) -> ())
  public func getCurrentConfigurations(_ completion: @escaping (Swift.Result<[WidgetKit.WidgetInfo], Swift.Error>) -> ())
  public func reloadTimelines(ofKind kind: Swift.String)
  public func reloadAllTimelines()
  @objc deinit
}
extension View {
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func widgetURL(_ url: Foundation.URL?) -> some SwiftUI.View
  
}
extension TimelineReloadPolicy : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Widget {
  public static func main()
}
extension WidgetBundle {
  public static func main()
}
public typealias _Configuration = SwiftUI._Widget
extension EnvironmentValues {
  public var widgetFamily: WidgetKit.WidgetFamily {
    get
  }
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum WidgetFamily : Swift.Int, Swift.RawRepresentable, Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  case systemSmall
  case systemMedium
  case systemLarge
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  @available(*, deprecated, renamed: "systemSmall")
  public static let small: WidgetKit.WidgetFamily
  @available(*, deprecated, renamed: "systemMedium")
  public static let medium: WidgetKit.WidgetFamily
  @available(*, deprecated, renamed: "systemLarge")
  public static let large: WidgetKit.WidgetFamily
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated)
extension _Widget {
  public func run()
}
public struct BridgedBody : SwiftUI._Widget, SwiftUI.WidgetConfiguration {
  public var body: Swift.Never {
    get
  }
  public static func _makeWidget(widget: SwiftUI._GraphValue<WidgetKit.BridgedBody>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  public static func _makeWidgetConfiguration(widget: SwiftUI._GraphValue<WidgetKit.BridgedBody>, inputs: SwiftUI._WidgetInputs) -> SwiftUI._WidgetOutputs
  public typealias WidgetBody = Swift.Never
  public typealias Body = Swift.Never
}
extension _Widget {
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func configurationDisplayName(_ displayName: SwiftUI.Text) -> some SwiftUI._Widget
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func configurationDisplayName(_ displayNameKey: SwiftUI.LocalizedStringKey) -> some SwiftUI._Widget
  
  @_disfavoredOverload public func configurationDisplayName<S>(_ displayName: S) -> some SwiftUI._Widget where S : Swift.StringProtocol
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func description(_ description: SwiftUI.Text) -> some SwiftUI._Widget
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func description(_ descriptionKey: SwiftUI.LocalizedStringKey) -> some SwiftUI._Widget
  
  @_disfavoredOverload public func description<S>(_ text: S) -> some SwiftUI._Widget where S : Swift.StringProtocol
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func supportedFamilies(_ families: [WidgetKit.WidgetFamily]) -> some SwiftUI._Widget
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onBackgroundURLSessionEvents(matching matchingString: Swift.String, _ urlSessionEvent: @escaping ((Swift.String, @escaping () -> ()) -> ())) -> some SwiftUI._Widget
  
  @available(iOS, deprecated, introduced: 14.0, renamed: "onBackgroundURLSessionEvents(matching:_:)")
  @available(OSX, deprecated, introduced: 10.16, renamed: "onBackgroundURLSessionEvents(matching:_:)")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onURLSessionEvents(matching matchingString: Swift.String, _ urlSessionEvent: @escaping ((Swift.String, @escaping () -> ()) -> ())) -> some SwiftUI._Widget
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onBackgroundURLSessionEvents(matching matchingBlock: ((Swift.String) -> Swift.Bool)? = nil, _ urlSessionEvent: @escaping ((Swift.String, @escaping () -> ()) -> ())) -> some SwiftUI._Widget
  
  @available(iOS, deprecated, introduced: 14.0, renamed: "onBackgroundURLSessionEvents(matching:_:)")
  @available(OSX, deprecated, introduced: 10.16, renamed: "onBackgroundURLSessionEvents(matching:_:)")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onURLSessionEvents(matching matchingBlock: ((Swift.String) -> Swift.Bool)? = nil, _ urlSessionEvent: @escaping ((Swift.String, @escaping () -> ()) -> ())) -> some SwiftUI._Widget
  
}
public struct _ClockHandRotationEffect : SwiftUI.ViewModifier, SwiftUI._ArchivableViewModifier {
  public enum Period {
    case hourHand
    case minuteHand
    case secondHand
    case custom(Foundation.TimeInterval)
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func body(content: WidgetKit._ClockHandRotationEffect.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9WidgetKit24_ClockHandRotationEffectV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) 🦸
}
extension View {
  public func _clockHandRotationEffect(_ period: WidgetKit._ClockHandRotationEffect.Period, in timeZone: Foundation.TimeZone, anchor: SwiftUI.UnitPoint = .center) -> some SwiftUI.View
  
}
@available(*, deprecated)
public func _attachPreviewAgent(extensionIdentifier: Swift.String, frameworkPath: Swift.String, endpoint: Swift.AnyObject?, completion: @escaping (Swift.Result<Darwin.audit_token_t, Swift.Error>) -> Swift.Void)
public typealias WidgetCompletionBlock = () -> ()
public typealias WidgetConfigurationBlock = (WidgetKit.WidgetInfo, () -> ()) -> ()
extension WidgetConfiguration {
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func configurationDisplayName(_ displayName: SwiftUI.Text) -> some SwiftUI.WidgetConfiguration
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func configurationDisplayName(_ displayNameKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.WidgetConfiguration
  
  @_disfavoredOverload public func configurationDisplayName<S>(_ displayName: S) -> some SwiftUI.WidgetConfiguration where S : Swift.StringProtocol
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func description(_ description: SwiftUI.Text) -> some SwiftUI.WidgetConfiguration
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func description(_ descriptionKey: SwiftUI.LocalizedStringKey) -> some SwiftUI.WidgetConfiguration
  
  @_disfavoredOverload public func description<S>(_ text: S) -> some SwiftUI.WidgetConfiguration where S : Swift.StringProtocol
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func supportedFamilies(_ families: [WidgetKit.WidgetFamily]) -> some SwiftUI.WidgetConfiguration
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onBackgroundURLSessionEvents(matching matchingString: Swift.String, _ urlSessionEvent: @escaping ((Swift.String, @escaping () -> ()) -> ())) -> some SwiftUI.WidgetConfiguration
  
  @available(iOS, deprecated, introduced: 14.0, renamed: "onBackgroundURLSessionEvents(matching:_:)")
  @available(OSX, deprecated, introduced: 10.16, renamed: "onBackgroundURLSessionEvents(matching:_:)")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onURLSessionEvents(matching matchingString: Swift.String, _ urlSessionEvent: @escaping ((Swift.String, @escaping () -> ()) -> ())) -> some SwiftUI.WidgetConfiguration
  
  @available(iOS 14.0, OSX 10.16, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onBackgroundURLSessionEvents(matching matchingBlock: ((Swift.String) -> Swift.Bool)? = nil, _ urlSessionEvent: @escaping ((Swift.String, @escaping () -> ()) -> ())) -> some SwiftUI.WidgetConfiguration
  
  @available(iOS, deprecated, introduced: 14.0, renamed: "onBackgroundURLSessionEvents(matching:_:)")
  @available(OSX, deprecated, introduced: 10.16, renamed: "onBackgroundURLSessionEvents(matching:_:)")
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func onURLSessionEvents(matching matchingBlock: ((Swift.String) -> Swift.Bool)? = nil, _ urlSessionEvent: @escaping ((Swift.String, @escaping () -> ()) -> ())) -> some SwiftUI.WidgetConfiguration
  
}
@_hasMissingDesignatedInitializers public class AvocadoServer {
  public static let shared: WidgetKit.AvocadoServer
  public func currentConfigurations() -> [WidgetKit.WidgetInfo]
  public func reloadTimelines(ofKind: Swift.String)
  public static func reloadTimeline(for avocadoIdentifier: Swift.String, inBundleWithIdentifier bundleIdentifier: Swift.String)
  public static func reloadTimelines(inBundleWithIdentifier bundleIdentifier: Swift.String)
  @available(*, deprecated)
  public static func extendTimeline(for avocadoIdentifier: Swift.String, inBundleWithIdentifier bundleIdentifier: Swift.String)
  @available(*, deprecated)
  public static func extendTimelines(inBundleWithIdentifier bundleIdentifier: Swift.String)
  @objc deinit
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct IntentConfiguration<Intent, Content> : SwiftUI.WidgetConfiguration, SwiftUI._Widget where Intent : Intents.INIntent, Content : SwiftUI.View {
  public var body: WidgetKit.BridgedBody {
    get
  }
  public typealias Body = WidgetKit.BridgedBody
  public typealias WidgetBody = WidgetKit.BridgedBody
}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension IntentConfiguration {
  public init<Provider, PlaceholderContent>(kind: Swift.String, intent: Intent.Type, provider: Provider, placeholder: PlaceholderContent, content: @escaping (Provider.Entry) -> Content) where Intent == Provider.Intent, Provider : WidgetKit.IntentTimelineProvider, PlaceholderContent : SwiftUI.View
}
@available(*, deprecated)
extension WidgetKit.RequestReason : Swift.Equatable {}
@available(*, deprecated)
extension WidgetKit.RequestReason : Swift.Hashable {}
@available(*, deprecated)
extension WidgetKit.RequestReason : Swift.RawRepresentable {}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.WidgetFamily : Swift.Equatable {}
@available(iOS 14.0, OSX 10.16, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension WidgetKit.WidgetFamily : Swift.Hashable {}
